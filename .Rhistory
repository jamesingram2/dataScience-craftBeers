model_rweka2 <- SimpleKMeans (fed, control = Weka_control(N = 3, I=500, S=100))
model_rweka2
model_rweka1 <- SimpleKMeans (fed_unlabel, control = Weka_control(N = 5, I=500, S=100))
model_rweka1
model_rweka2 <- SimpleKMeans (fed_unlabel, control = Weka_control(N = 3, I=500, S=100))
model_rweka2
model_rweka3 <- SimpleKMeans (fed_unlabel, control = Weka_control(N = 2, I=500, S=100))
model_rweka3
model_r1 <- kmeans(fed_unlabel, 5)
model_r1
model_r1$size
model_r1$centers
model_r2 <- kmeans(fed_unlabel, 3)
model_r2
model_r2$size
model_r2$centers
model_r3 <- kmeans(fed_unlabel, 2)
model_r3
model_r3$size
str(fed)
fed2 <- fed[-63:-70,]
fed2 <- droplevels(fed2)
str(fed2)
summary(fed2$author)
fed_unlabel2 <- fed[3:72]
str(fed_unlabel2)
fed_unlabel2 <- fed2[3:72]
str(fed_unlabel2)
model_r4 <- kmeans(fed_unlabel2, 2)
model_r4
model_r4$size
model_r4$centers
cluster_assignment <- data.frame(fed2,model_r4$cluster)
View(cluster_assignment)
str(fed2)
cluster_assignment <- data.frame(fed2,model_r4$cluster)
View(cluster_assignment)
clusplot(fed_unlabe2l, model_r4$cluster, color=TRUE, shade=TRUE, labels=2, lines=0) # plot clusters
clusplot(fed_unlabel2, model_r4$cluster, color=TRUE, shade=TRUE, labels=2, lines=0) # plot clusters
clusters <- hclust(dist(fed_unlabel2), method = 'single')
plot(clusters)
clusterCut <- cutree(clusters, 2)
table(clusterCut, fed2$author)
clusters2 <- hclust(dist(fed_unlabel2), method = 'average')
plot(clusters2)
clusterCut2 <- cutree(clusters2, 2)
table(clusterCut2, fed2$author)
clusters2 <- hclust(dist(fed_unlabel2), method = 'complete')
plot(clusters2)
clusterCut2 <- cutree(clusters2, 2)
table(clusterCut2, fed2$author)
clusters3 <- hclust(dist(fed_unlabel2), method = 'average')
plot(clusters3)
clusterCut3 <- cutree(clusters2, 2)
table(clusterCut3, fed2$author)
clusters4 <- hclust(dist(fed_unlabel2), method = 'center')
plot(clusters, main="Cluster Dendrogram - Single Linkage")
plot(clusters2, main="Cluster Dendrogram (Complete Linkage)")
plot(clusters3, main="Cluster Dendrogram (Mean Linkage)")
plot(clusters, main="Cluster Dendrogram (Single Linkage)")
plot(clusters2, main="Cluster Dendrogram (Complete Linkage)")
plot(clusters3, main="Cluster Dendrogram (Mean Linkage)")
clusterCut <- cutree(clusters, 2)
table(clusterCut, fed2$author)
clusterCut2 <- cutree(clusters2, 2)
table(clusterCut2, fed2$author)
clusterCut3 <- cutree(clusters2, 2)
table(clusterCut3, fed2$author)
q()
library("RWeka")
library(Rweka)
library(RWeka)
install.packages("rJava")
library(rJava)
library(ggplot2)
library(RWeka)
library(cluster)
fed <- read.csv("C:/Users/james/OneDrive/Documents/Education/Syracuse University/IST 565 - Data Mining/Week 4/Files/fedPapers85.csv")
str(fed)
summary(fed$author)
fed_unlabel <- fed[3:72]
str(fed_unlabel)
model_rweka1 <- SimpleKMeans (fed_unlabel, control = Weka_control(N = 5, I=500, S=100))
model_rweka1
model_rweka2 <- SimpleKMeans (fed_unlabel, control = Weka_control(N = 3, I=500, S=100))
model_rweka2
model_rweka3 <- SimpleKMeans (fed_unlabel, control = Weka_control(N = 2, I=500, S=100))
model_rweka3
model_r1 <- kmeans(fed_unlabel, 5)
model_r1
model_r1$size
model_r1$centers
model_r2 <- kmeans(fed_unlabel, 3)
model_r2
model_r2$size
model_r2$centers
model_r3 <- kmeans(fed_unlabel, 2)
model_r3
model_r3$size
model_r3$centers
fed2 <- fed[-63:-70,]
fed2 <- droplevels(fed2)
str(fed2)
summary(fed2$author)
fed_unlabel2 <- fed2[3:72]
str(fed_unlabel2)
model_r4 <- kmeans(fed_unlabel2, 2)
model_r4
model_r4$size
model_r4$centers
cluster_assignment <- data.frame(fed2,model_r4$cluster)
View(cluster_assignment)
clusplot(fed_unlabel2, model_r4$cluster, color=TRUE, shade=TRUE, labels=2, lines=0) # plot clusters
clusters <- hclust(dist(fed_unlabel2), method = 'single')
plot(clusters, main="Cluster Dendrogram (Single Linkage)")
clusterCut <- cutree(clusters, 2)
table(clusterCut, fed2$author)
clusters2 <- hclust(dist(fed_unlabel2), method = 'complete')
plot(clusters2, main="Cluster Dendrogram (Complete Linkage)")
clusterCut2 <- cutree(clusters2, 2)
table(clusterCut2, fed2$author)
clusters3 <- hclust(dist(fed_unlabel2), method = 'average')
plot(clusters3, main="Cluster Dendrogram (Mean Linkage)")
clusterCut3 <- cutree(clusters2, 2)
table(clusterCut3, fed2$author)
q()
library(rJava)
library(ggplot2)
library(RWeka)
library(cluster)
trainset <- read.csv("C:/Users/james/OneDrive/Documents/Education/Syracuse University/IST 565 - Data Mining/Week 5/Files/titanic-train.csv")
testset <- read.csv("C:/Users/james/OneDrive/Documents/Education/Syracuse University/IST 565 - Data Mining/Week 5/Files/titanic-test.csv")
NN <- make_Weka_filter("weka/filters/unsupervised/attribute/NumericToNominal")
trainset <- NN(data=trainset, control=Weka_control(R="1-3"), na.action=NULL)
testset <- NN(data=testset, control=Weka_control(R="1,3"), na.action=NULL)
MS <- make_Weka_filter("weka/filters/unsupervised/attribute/ReplaceMissingValues")
trainset <- MS(data=trainset, na.action=NULL)
testset <_ MS(data=testset, na.action=NULL)
testset <- MS(data=testset, na.action=NULL)
str(trainset)
m <- J48(Survived~., data = trainset)
m <- J48(Survived~., data = trainset, control=Weka_control(U=FALSE, M=2, C=0.5))
WOW("J48")
e <- evaluate_Weka_classifier(m, numFolds=10, seed=1, class=TRUE)
e
pred <- predict(m, newdata = testset, type=c("class"))
pred
write.csv(pred, file="C:/Users/james/OneDrive/Documents/Education/Syracuse University/IST 565 - Data Mining/Week 5/Files/prediction.csv")
myVars <- c("PClass","Sex","Age","SibSp","Parch","Fare","Survived")
newtrain <- trainset(myVars)
newtrain <- trainset[myVars]
myVars <- c("Pclass","Sex","Age","SibSp","Parch","Fare","Survived")
newtrain <- trainset[myVars]
newtest <- testset[myVars]
m <- J48(Survived~., data = newtrain)
m <- J48(Survived~., data = newtrain, control=Weka_control(U=FALSE, M=2, C=0.5))
e <- evaluate_Weka_classifer(m, seed=1, numFolds=10)
e <- evaluate_Weka_classifier(m, numFolds=10, seed=1, class=TRUE)
pred <- predict(m, newdata = newtest, type = c("class"))
e
pred
myids <- c("PassengerId")
id_col <- testset[myids]
newpred <- cbind(id_col, pred)
colnames(newpred) <- c("PassengerId", "Survived")
View(newpred)
write.csv(newpred, file="C:/Users/james/OneDrive/Documents/Education/Syracuse University/IST 565 - Data Mining/Week 5/Files/titanic-J48_pred.csv", row.names=FALSE)
InfoGainAttributeEval(Survived~., data=trainset)
order(InfoGainAttributeEval(Survived~., data=trainset))
ig <- InfoGainAttributeEval(Survived~., data=trainset)
ig
ig <- order(ig)
ig
ig <- InfoGainAttributeEval(Survived~., data=trainset)
ig <- ig[ordered]
ig <- ordered(ig)
ig
ig
InfoGainAttributeEval(Survived~., data=trainset)
InfoGainAttributeEval(Survived~., data=newtrain)
q()
library(rJava)
library(ggplot2)
library(RWeka)
library(cluster)
trainset <- read.csv("C:/Users/james/OneDrive/Documents/Education/Syracuse University/IST 565 - Data Mining/Week 5/Files/titanic-train.csv")
testset <- read.csv("C:/Users/james/OneDrive/Documents/Education/Syracuse University/IST 565 - Data Mining/Week 5/Files/titanic-test.csv")
NN <- make_Weka_filter("weka/filters/unsupervised/attribute/NumericToNominal")
trainset <- NN(data=trainset, control=Weka_control(R="1-3"), na.action=NULL)
testset <- NN(data=testset, control=Weka_control(R="1,3"), na.action=NULL)
MS <- make_Weka_filter("weka/filters/unsupervised/attribute/ReplaceMissingValues")
trainset <- MS(data=trainset, na.action=NULL)
testset <- MS(data=testset, na.action=NULL)
str(trainset)
m <- J48(Survived~., data = trainset)
m <- J48(Survived~., data = trainset, control=Weka_control(U=FALSE, M=2, C=0.5))
WOW("J48")
e <- evaluate_Weka_classifier(m, numFolds=10, seed=1, class=TRUE)
e
pred <- predict(m, newdata = testset, type=c("class"))
pred
write.csv(pred, file="C:/Users/james/OneDrive/Documents/Education/Syracuse University/IST 565 - Data Mining/Week 5/Files/prediction.csv")
myVars <- c("Pclass","Sex","Age","SibSp","Parch","Fare","Survived")
newtrain <- trainset[myVars]
newtest <- testset[myVars]
m <- J48(Survived~., data = newtrain)
m <- J48(Survived~., data = newtrain, control=Weka_control(U=FALSE, M=2, C=0.5))
e <- evaluate_Weka_classifier(m, numFolds=10, seed=1, class=TRUE)
e
pred <- predict(m, newdata = newtest, type = c("class"))
pred
myids <- c("PassengerId")
id_col <- testset[myids]
newpred <- cbind(id_col, pred)
colnames(newpred) <- c("PassengerId", "Survived")
View(newpred)
install.packages("rJava")
write.csv(newpred, file="C:/Users/james/OneDrive/Documents/Education/Syracuse University/IST 565 - Data Mining/Week 5/Files/titanic-J48_pred.csv", row.names=FALSE)
InfoGainAttributeEval(Survived~., data=newtrain)
m <- J48(Survived~., data = newtrain)
m <- J48(Survived~., data = newtrain, control=Weka_control(B=TRUE, U=FALSE, M=2, C=0.5))
e <- evaluate_Weka_classifier(m, numFolds=10, seed=1, class=TRUE)
e
pred <- predict(m, newdata = newtest, type = c("class"))
pred
myids <- c("PassengerId")
id_col <- testset[myids]
newpred <- cbind(id_col, pred)
colnames(newpred) <- c("PassengerId", "Survived")
View(newpred)
write.csv(newpred, file="C:/Users/james/OneDrive/Documents/Education/Syracuse University/IST 565 - Data Mining/Week 5/Files/titanic-J48_pred_binary.csv", row.names=FALSE)
InfoGainAttributeEval(Survived~., data=newtrain)
q()
q()
#####################################
# Install Packages and Load Libraries
#####################################
packages <- c("tidyverse", "RWeka","rJava","caret","e1071","kernlab", "randomForest", "class", "ggplot2", "ggmaps", "maps", "mapdata", "maptools", "rstudioapi")
package.check <- lapply(packages, FUN = function(x){
if(!require(x, character.only=TRUE)){
install.packages(x, dependencies=TRUE)
library(x, character.only=TRUE)
}
})
##############################
# Data Load and Pre-Processing
##############################
setwd(dirname(getActiveDocumentContext()$path))
beers <- read.csv("beers.csv")
breweries <- read.csv("breweries.csv")
# examine datasets
str(beers)
sum(is.na(beers)) # find total NAs in beers data set
str(breweries)
sum(is.na(breweries)) # find total NAs in breweries data set
# omit NAs
beers <- na.omit(beers)
rownames(beers) <- NULL # resets row counts after NAs are removed
# remove beers$X and beers$id
beers <- beers[, -1,]
beers <- beers[, -3]
head(beers) # examine structure of beers dataframe
# rename beers$name to beers$beer_name
cnames <- colnames(beers)
cnames[3] <- "beer_name"
colnames(beers) <- cnames
colnames(beers)
# rename breweries$X to breweries$brewery_id and breweries$name to breweries$brewery_name
cnames <- colnames(breweries)
cnames[1] <- "brewery_id"
cnames[2] <- "brewery_name"
colnames(breweries) <- cnames
colnames(breweries)
# merge beers and breweries data sets on brewery_id
df <- merge(x = beers, y = breweries, by = "brewery_id")
# re-order column headings and remove brewery_id from dataframe
df <- df[,c(4,5,2,3,6,7,8,9)]
head(df) # examine new dataframe
View(head(df,25))
###########################
# Exploratory Data Analysis
###########################
# display frequency distribution of abv
g.abv <- ggplot(df, aes(x=abv))
g.abv <- g.abv + geom_histogram(bins=10, color = "black", fill="white")
g.abv <- g.abv + ggtitle("Histogram of Alcohol By Volume")
g.abv
# examine central tendency and range of abv
mean(df$abv)
g.abv.box <- ggplot(df, aes(x=factor(0),abv)) + geom_boxplot() + ggtitle("Alcohol Content")
g.abv.box
# sort beers with highest alcohol by volume (display top 10)
sortedAbv <- df[order(-df$abv), ]
View(head(sortedAbv,10))
# display frequency distribution of ibu
g.ibu <- ggplot(df, aes(x=ibu))
g.ibu <- g.abv + geom_histogram(bins=10, color = "black", fill="white")
g.ibu <- g.abv + ggtitle("Histogram of International Bittering Units")
g.ibu
# examine central tendency and range of ibu
mean(df$ibu)
g.ibu.box <- ggplot(df, aes(x=factor(0),ibu)) + geom_boxplot() + ggtitle("International Bittering Units")
g.ibu.box
# sort beers with highest international bitter units (display top 10)
sortedIbu <- df[order(-df$ibu), ]
View(head(sortedIbu, 10))
# display frequency distribution of ounces
g.ounces <- ggplot(df, aes(x=ounces))
g.ounces <- g.ounces + geom_histogram(bins = 5, color = "black", fill="white")
g.ounces <- g.ounces + ggtitle("Histogram of Beer Volume (in Ounces)")
g.ounces
# examine central tendency and range of ounces
mean(df$ounces)
g.ounces.box <- ggplot(df, aes(x=factor(0),ounces)) + geom_boxplot() + ggtitle("Beer Ounces")
g.ounces.box
# sort beers with largest volume in ounces (display top 10)
sortedOunces <- df[order(-df$ounces), ]
View(head(sortedOunces, 10))
# Frequency of beers by state
stateBeers <- barplot(table(df$state), main="Beers by State", las=2)
####################
# map visualizations
####################
# the following function is thanks to
# https://favorableoutcomes.wordpress.com/2012/10/19/create-an-r-function-to-convert-state-codes-to-full-state-name/
stateFromLower <-function(x) {
#read 52 state codes into local variable [includes DC (Washington D.C. and PR (Puerto Rico)]
st.codes<-data.frame(
state=as.factor(c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA",
"HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME",
"MI", "MN", "MO", "MS",  "MT", "NC", "ND", "NE", "NH", "NJ", "NM",
"NV", "NY", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN",
"TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY")),
full=as.factor(c("alaska","alabama","arkansas","arizona","california","colorado",
"connecticut","district of columbia","delaware","florida","georgia",
"hawaii","iowa","idaho","illinois","indiana","kansas","kentucky",
"louisiana","massachusetts","maryland","maine","michigan","minnesota",
"missouri","mississippi","montana","north carolina","north dakota",
"nebraska","new hampshire","new jersey","new mexico","nevada",
"new york","ohio","oklahoma","oregon","pennsylvania","puerto rico",
"rhode island","south carolina","south dakota","tennessee","texas",
"utah","virginia","vermont","washington","wisconsin",
"west virginia","wyoming"))
)
#create an nx1 data.frame of state codes from source column
st.x<-data.frame(state=x)
#match source codes with codes from 'st.codes' local variable and use to return the full state name
refac.x<-st.codes$full[match(st.x$state,st.codes$state)]
#return the full state names in the same order in which they appeared in the original source
return(refac.x)
}
# plot average abv and ibu by style
states<-map_data("state")
levels(df$state)
df$state<-gsub("[[:space:]]", "", df$state)
df$region<-stateFromLower(df$state)
agg<-aggregate(cbind(ibu,abv)~region,FUN = mean,df)
# text data for maps
counts<-as.data.frame(table(df$state)) # no. of observations per state
df.ibu<-df[!is.na(df$ibu),]
counts.ibu<-as.data.frame(table(df.ibu$state))
colnames(counts.ibu)<-c("state.abb","count.ibu")
colnames(counts)<-c("state.abb","count")
txt <- data.frame(state.center, state.abb)
d1<-txt
d2<-counts
d3<-counts.ibu
lab<-merge(d1,d2, by = "state.abb", all=FALSE)
lab<-merge(lab,d3,by="state.abb")
rm(counts,txt,d1,d2,d3)
plot.data <- inner_join(states, agg, by = "region")
# ABV
ggplot(data = plot.data, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +   geom_polygon(data = plot.data, aes(fill = abv), color = "white") +
geom_polygon(color = "black", fill = NA) +theme_bw() +labs( title="Average ABV by State \n (number = observations of ABV by state)")+
scale_fill_gradientn("ABV",colors=c("#BBFFFF","#000080" ))+
theme(axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank())+
geom_text(data = lab, aes(x = x, y = y, label = count, group = NULL), size = 2)+theme_bw()
# IBU
ggplot(data = plot.data, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +   geom_polygon(data = plot.data, aes(fill = ibu), color = "white") +
geom_polygon(color = "black", fill = NA) +theme_bw() +labs( title="Average IBU by State \n (number = observations of IBU by state)")+
scale_fill_gradientn(colours = rev(rainbow(7)))+
# breaks = c(2, 4, 10, 30, 50, 60),
# trans = "log10")+
theme(axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank())+
geom_text(data = lab, aes(x = x, y = y, label = count.ibu, group = NULL), size = 2)+theme_bw()
# number of styles per state
df$style<-as.character(df$style)
df.new<-within(df,{no.styles<-ave(style,region,FUN=function(x) length(unique(x)))})
agg<-subset(df.new,select=c("region","no.styles"))
agg<-unique(agg)
agg$no.styles<-as.numeric(paste(agg$no.styles))
plot.data <- inner_join(states, agg, by = "region")
ggplot(data = plot.data, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +   geom_polygon(data = plot.data, aes(fill = no.styles), color = "white") +
geom_polygon(color = "black", fill = NA) +theme_bw() +labs( title="Number of styles per State \n (number = observations by state)")+
scale_fill_gradientn("no. of styles",colors=c("#FF9999","#000099" ))+
theme(axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank())+
geom_text(data = lab, aes(x = x, y = y, label = count, group = NULL), size = 2)+theme_bw()
# Relationship between ABV and IBU
df$ounces<-as.factor(df$ounces)
qplot(ibu,abv,data=df,color=ounces)
#let's relabel 16.9 ounces as 16 ounces
df$ounces.new<-df$ounces
df$ounces.new[df$ounces==16.9]<-16
ggplot(data=df,aes(x=ibu,y=abv,color=ounces.new))+geom_point(size=1.5,alpha=.8)+
scale_color_manual(breaks = c("8.4","12","16","19.2","24","32"),
values=c("red", "blue", "green","yellow","black","pink"))+theme_bw()
#####################################
# Install Packages and Load Libraries
#####################################
packages <- c("tidyverse", "RWeka","rJava","caret","e1071","kernlab", "randomForest", "class", "ggplot2", "ggmaps", "maps", "mapdata", "maptools", "rstudioapi")
package.check <- lapply(packages, FUN = function(x){
if(!require(x, character.only=TRUE)){
install.packages(x, dependencies=TRUE)
library(x, character.only=TRUE)
}
})
#####################################
# Install Packages and Load Libraries
#####################################
packages <- c("tidyverse", "RWeka","rJava","caret","e1071","kernlab", "randomForest", "class", "ggplot2", "ggmaps", "maps", "mapdata", "maptools", "rstudioapi")
package.check <- lapply(packages, FUN = function(x){
if(!require(x, character.only=TRUE)){
install.packages(x, dependencies=TRUE)
library(x, character.only=TRUE)
}
})
if(!require(x, character.only=TRUE)){
install.packages(x, dependencies=TRUE)
library(x, character.only=TRUE)
}
package.check <- lapply(packages, FUN = function(x){
if(!require(x, character.only=TRUE)){
install.packages(x, dependencies=TRUE)
library(x, character.only=TRUE)
}
})
packages <- c("tidyverse", "RWeka","rJava","caret","e1071","kernlab", "randomForest", "class", "cluster", "ggplot2", "ggmap", "maps", "mapdata", "maptools", "rstudioapi")
package.check <- lapply(packages, FUN = function(x){
if(!require(x, character.only=TRUE)){
install.packages(x, dependencies=TRUE)
library(x, character.only=TRUE)
}
})
setwd(dirname(getActiveDocumentContext()$path))
beers <- read.csv("beers_new.csv")
breweries <- read.csv("breweries.csv")
# examine datasets
str(beers)
sum(is.na(beers)) # find total NAs in beers data set
str(breweries)
sum(is.na(breweries)) # find total NAs in breweries data set
# omit NAs
beers <- na.omit(beers)
rownames(beers) <- NULL # resets row counts after NAs are removed
# remove beers$Column1 and beers$id
beers <- beers[, -1,]
beers <- beers[, -3]
head(beers) # examine structure of beers dataframe
# rename beers$name to beers$beer_name
cnames <- colnames(beers)
cnames[3] <- "beer_name"
colnames(beers) <- cnames
colnames(beers)
# rename breweries$X to breweries$brewery_id and breweries$name to breweries$brewery_name
cnames <- colnames(breweries)
cnames[1] <- "brewery_id"
cnames[2] <- "brewery_name"
colnames(breweries) <- cnames
colnames(breweries)
# merge beers and breweries data sets on brewery_id
df <- merge(x = beers, y = breweries, by = "brewery_id")
# re-order column headings and remove brewery_id from dataframe
df <- df[,c(4,5,2,3,6,7,8,9)]
View(head(df,25))
# standardize ounces
df$ounces[df$ounces==8.4]<-8
df$ounces[df$ounces==16.9]<-16
df$ounces[df$ounces==19.2]<-20
# create new csv file containing cleaned data set
write.csv(df, file="clean_beer_data.csv")
# frequency of each beer style
barplot(table(df$style), main="Beer Style Frequency", xlab="Styles", ylab="Frequency", cex.axis=0.5)
# ABV
# display frequency distribution of abv
g.abv <- ggplot(df, aes(x=abv))
g.abv <- g.abv + geom_histogram(bins=10, color = "blue", fill="light blue")
g.abv <- g.abv + ggtitle("Histogram of Alcohol By Volume")
g.abv <- g.abv + theme(plot.title = element_text(hjust = 0.5))
g.abv
# sort beers with highest alcohol by volume (display top 10)
sortedAbv <- df[order(-df$abv), ]
View(head(sortedAbv,10))
# Look at ABV by Beer Style
plot(x=df$style, y=df$abv, xlab="Beer Styles", ylab="ABV", cex.axis=1, main="Alcohol By Volume")
